# docker-compose.yml

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # ADVERTISED LISTENERS (internal + external)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./mongodb-data:/data/db
    networks:
      - mongodb-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    depends_on:
      - mongodb
    ports:
      - "28081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - mongodb-network

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    restart: always
    ports:
      - "8761:8761"
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - spring-network

  postgres-file-storage-service:
    image: postgres:15
    container_name: file-storage-db
    restart: always
    environment:
      - POSTGRES_DB=definex_file_storage_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_file_storage_service_data:/var/lib/postgresql/data
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  file-storage-service:
    build:
      context: ./file-storage-service
      dockerfile: Dockerfile
    container_name: file-storage-service
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_started
      postgres-file-storage-service:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_CLIENT_REGISTERWITHEUREKA=true
      - EUREKA_CLIENT_FETCHREGISTRY=true
    networks:
      - spring-network

  postgres-user-authentication-service:
    image: postgres:15
    container_name: user-auth-db
    restart: always
    environment:
      - POSTGRES_DB=definex_user_authentication_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_user_authentication_data:/var/lib/postgresql/data
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-authentication-service:
    build:
      context: ./user-authentication-service
      dockerfile: Dockerfile
    container_name: user-authentication-service
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_started
      postgres-user-authentication-service:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_CLIENT_REGISTERWITHEUREKA=true
      - EUREKA_CLIENT_FETCHREGISTRY=true
    networks:
      - spring-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_started
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_CLIENT_REGISTERWITHEUREKA=true
      - EUREKA_CLIENT_FETCHREGISTRY=true
    networks:
      - spring-network

  postgres-task-management-service:
    image: postgres:15
    container_name: task-management-db
    restart: always
    environment:
      - POSTGRES_DB=definex_task_management_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_task_management_data:/var/lib/postgresql/data
    networks:
      - spring-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  task-management-service:
    build:
      context: ./task-management-service
      dockerfile: Dockerfile
    container_name: task-management-service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_started
      postgres-task-management-service:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - EUREKA_CLIENT_REGISTERWITHEUREKA=true
      - EUREKA_CLIENT_FETCHREGISTRY=true
    networks:
      - spring-network
      - kafka-network

  log-aggregation-service:
    build:
      context: ./log-aggregation-service
      dockerfile: Dockerfile
    container_name: log-aggregation-service
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_started
      kafka:
        condition: service_started
      mongodb:
        condition: service_started
    environment:
      - SPRING_APPLICATION_NAME=log-aggregation-service
      - SERVER_PORT=8084
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongodb:27017/definex_logs_db?authSource=admin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=group1
      - KAFKA_TOPIC_INFO_LOG=infoLog
      - KAFKA_TOPIC_ERROR_LOG=errorLog
    networks:
      - spring-network
      - kafka-network
      - mongodb-network

volumes:
  postgres_file_storage_service_data:
  postgres_user_authentication_data:
  postgres_task_management_data:

networks:
  spring-network:
  kafka-network:
  mongodb-network:
